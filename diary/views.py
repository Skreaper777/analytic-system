
# diary/views.py
"""–í—å—é—Ö–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:
‚Ä¢ ¬´–ù–∞ –ª–µ—Ç—É¬ª ‚Äî –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .pkl‚Äë—Ñ–∞–π–ª–æ–≤;
‚Ä¢ ¬´–ë–∞–∑–∞¬ª   ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ diary/trained_models/base/*.pkl.

–®–∞–±–ª–æ–Ω add_entry.html —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ `live_predictions` –∏ `base_predictions`,
–∞ endpoint /predict/ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ `{parameter_key: {"value": 1.2}}`
–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã JS‚Äë–ª–æ–≥–∏–∫–∏.
"""

from __future__ import annotations

import json
import logging
import os
from datetime import date, datetime
from typing import Any, Dict

import joblib
import pandas as pd
import numpy as np
from django.conf import settings
from django.http import JsonResponse, HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt

from .forms import EntryForm
from .models import Entry, EntryValue, Parameter
from .ml_utils.utils import get_diary_dataframe
from .ml_utils import base_model

logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------

def _color_hint(diff: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –º–æ–¥—É–ª—é –¥–µ–ª—å—Ç—ã."""
    diff_abs = abs(diff)
    if diff_abs < 1:
        return "green"
    if diff_abs <= 2:
        return "yellow"
    return "red"

def _predict_for_row(
    df: pd.DataFrame,
    today_values: Dict[str, float],
    mode: str = "live",
) -> Dict[str, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ``today_values`` –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö.

    Parameters
    ----------
    df
        –ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–ª—é—á–∏ = Parameter.key).
    today_values
        –°–ª–æ–≤–∞—Ä—å {parameter_key: value} –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è.
    mode
        "live" ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ª–µ—Ç—É;
        "base" ‚Äî –∑–∞–≥—Ä—É–∂–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ .pkl‚Äë—Ñ–∞–π–ª—ã.

    Returns
    -------
    Dict[str, float]
        {parameter_key: predicted_value}
    """
    predictions: Dict[str, float] = {}
    model_dir = os.path.join(settings.BASE_DIR, "diary", "trained_models", "base")

    for target in today_values.keys():
        try:
            # --- 1. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏—á–µ–π
            if mode == "live":
                model_info = base_model.train_model(df.copy(), target=target, exclude=[target])
                model = model_info.get("model")
                features = model_info.get("features", getattr(model, "feature_names_in_", []))
            else:  # base
                model_path = os.path.join(model_dir, f"{target}.pkl")
                if not os.path.exists(model_path):
                    logger.warning("–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å %s.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", target)
                    continue
                model = joblib.load(model_path)
                features = getattr(model, "feature_names_in_", [])

            # --- 2. –ü—Ä–∏–≤–æ–¥–∏–º features –∫ —Å–ø–∏—Å–∫—É
            if isinstance(features, (pd.Index, np.ndarray)):
                features = features.tolist()
            if not features:
                # fallback ‚Äì –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ date/target
                features = [c for c in df.columns if c not in ("date", target)]

            # --- 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            safe_today = {
        f: float(today_values.get(f)) if today_values.get(f) not in [None, '', 'None'] else 0.0
        for f in features
    }
            X_today = pd.DataFrame([safe_today])

            # --- 4. –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
            pred_val = float(model.predict(X_today)[0])
            predictions[target] = round(pred_val, 2)
        except Exception:
            logger.exception("Prediction failed for %s (%s mode)", target, mode)
            continue

    return predictions
def _build_pred_dict(
    raw_preds: Dict[str, float],
    today_values: Dict[str, float],
) -> Dict[str, Dict[str, Any]]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞ add_entry.html."""
    out: Dict[str, Dict[str, Any]] = {}
    for key, val in raw_preds.items():
        diff = val - today_values.get(key, 0.0)
        out[key] = {
            "value": round(val, 1),
            "delta": round(val - today_values.get(key, 0.0), 1) if val is not None and today_values.get(key) is not None else None,
            "color": _color_hint(diff),
        }
    return out

# ---------------------------------------------------------------------------
# –°—Ç—Ä–∞–Ω–∏—Ü—ã
# ---------------------------------------------------------------------------

def add_entry(request):
    date_str = request.GET.get("date")
    try:
        entry_date = datetime.strptime(date_str, "%Y-%m-%d").date() if date_str else date.today()
    except ValueError:
        entry_date = date.today()
        logger.debug("Invalid date '%s' ‚Äî fallback to today", date_str)

    entry, _ = Entry.objects.get_or_create(date=entry_date)
    form = EntryForm(instance=entry)

    # ---- –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è -> —Å–ª–æ–≤–∞—Ä—å {key: value}
    parameter_qs = Parameter.objects.filter(active=True)
    parameter_keys = list(parameter_qs.values_list("key", flat=True))
    today_values = {ev.parameter.key: ev.value for ev in EntryValue.objects.filter(entry=entry)}
    for k in parameter_keys:
        today_values.setdefault(k, 0.0)

    # ---- –ü—Ä–æ–≥–Ω–æ–∑—ã
    df = get_diary_dataframe().copy()

    live_raw  = _predict_for_row(df, today_values, mode="live")
    base_raw  = _predict_for_row(df, today_values, mode="base")

    live_predictions = _build_pred_dict(live_raw, today_values)
    base_predictions = _build_pred_dict(base_raw, today_values)

    context = {
        "form": form,
        "entry": entry,
        "entry_date": entry_date.isoformat(),
        "today_str": date.today().isoformat(),
        "parameter_keys": parameter_keys,
        "range_6": range(6),
        "live_predictions": live_predictions,
        "base_predictions": base_predictions,
    }
    return render(request, "diary/add_entry.html", context)

def entry_success(request):
    return HttpResponseRedirect(reverse("diary:add_entry"))

# ---------------------------------------------------------------------------
# AJAX endpoints
# ---------------------------------------------------------------------------

@csrf_exempt
def update_value(request):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞."""
    if request.method != "POST":
        return JsonResponse({"error": "POST only"}, status=405)

    try:
        data = json.loads(request.body.decode("utf-8"))
        param_key: str = data["parameter"]
        value: float | None = data["value"]
        day = datetime.strptime(data["date"], "%Y-%m-%d").date()
    except (KeyError, ValueError, json.JSONDecodeError) as exc:
        logger.exception("update_value bad payload")
        return JsonResponse({"error": str(exc)}, status=400)

    entry, _ = Entry.objects.get_or_create(date=day)
    parameter = Parameter.objects.filter(key=param_key).first()
    if not parameter:
        return JsonResponse({"error": "Unknown parameter"}, status=400)

    entry_value, _ = EntryValue.objects.get_or_create(entry=entry, parameter=parameter)
    entry_value.value = value
    entry_value.save()

    logger.info("Saved %s = %s for %s", param_key, value, day.isoformat())
    return JsonResponse({"ok": True})

# ---------------------------------------------------------------------------
# prediction endpoint –¥–ª—è JS
# ---------------------------------------------------------------------------

@csrf_exempt
def predict_today(request):
    if request.method != "POST":
        return JsonResponse({"error": "POST only"}, status=405)

    try:
        user_input = json.loads(request.body.decode("utf-8"))  # {key: value}
    except json.JSONDecodeError:
        return JsonResponse({"error": "Invalid JSON"}, status=400)

    try:
        # ---- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = get_diary_dataframe().copy()
        if df.empty:
            return JsonResponse({})
        today_values = {**{k: 0.0 for k in df.columns if k not in ("date",)}, **user_input}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ¬´–Ω–∞ –ª–µ—Ç—É¬ª –º–æ–¥–µ–ª–∏
        live_raw = _predict_for_row(df, today_values, mode="live")
        response_payload = {k: {"value": v} for k, v in live_raw.items()}

        logger.debug("predict_today ‚Üí %s", response_payload)
        return JsonResponse(response_payload)

    except Exception as exc:
        logger.exception("predict_today failed")
        return JsonResponse({"error": str(exc)}, status=500)

# ---------------------------------------------------------------------------
# –î–æ–ø. –≤—å—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ---------------------------------------------------------------------------

import subprocess

def train_models_view(request):
    logger.info("üü° train_models_view –≤—ã–∑–≤–∞–Ω")
    try:
        result = subprocess.run(["python", "manage.py", "train_models"], check=True, capture_output=True, text=True)
        logger.info("üü¢ train_models –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("STDOUT:\n%s", result.stdout)
        logger.info("STDERR:\n%s", result.stderr)
        return HttpResponseRedirect(reverse("diary:add_entry"))
    except subprocess.CalledProcessError as exc:
        logger.exception("train_models_view failed")
        return JsonResponse({"error": exc.stderr}, status=500)