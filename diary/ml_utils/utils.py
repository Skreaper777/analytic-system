# diary/ml_utils/utils.py
"""Utility helpers for ML data preparation.

* –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç ¬´—Å—ã—Ä—ã–µ¬ª –¥–∞–Ω–Ω—ã–µ –≤ Excel —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
  (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) **–±–µ–∑** –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–ª—è–º–∏,
* –∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å **machine‚Äëfriendly**
  `Parameter.key`‚Äë–∫–æ–ª–æ–Ω–∫–∞–º–∏, –≥–¥–µ –ø—Ä–æ–ø—É—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ `0.0`.
"""

from __future__ import annotations

import logging
from typing import Dict, List

import pandas as pd

from diary.models import Entry, EntryValue, Parameter

logger = logging.getLogger("diary.ml_utils.utils")


def get_diary_dataframe() -> pd.DataFrame:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ –¥–≤–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.

    1. **df_excel** ‚Äî –∫–æ–ª–æ–Ω–∫–∏ = `Parameter.name_ru`, –ø—Ä–æ–ø—É—Å–∫–∏ *–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—É—Å—Ç—ã–º–∏*;
       —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ *debug_diary_dataframe.xlsx* –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    2. **df_keys**  ‚Äî –∫–æ–ª–æ–Ω–∫–∏ = `Parameter.key`, –ø—Ä–æ–ø—É—Å–∫–∏ -> `0.0`;
       –∏–º–µ–Ω–Ω–æ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è *–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç* –¥–ª—è ML‚Äë–º–æ–¥–µ–ª–µ–π.
    """

    # --- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ---
    parameters: List[Parameter] = list(Parameter.objects.filter(active=True))
    id_to_key: Dict[int, str] = {p.id: p.key for p in parameters}
    id_to_name: Dict[int, str] = {p.id: p.name_ru for p in parameters}

    # --- –°–±–æ—Ä —Å—Ç—Ä–æ–∫ –∫–∞–∫ ¬´key¬ª‚Äë –∏ ¬´name_ru¬ª‚Äë—Å–ª–æ–≤–∞—Ä–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
    rows_keys: List[Dict[str, object]] = []
    rows_names: List[Dict[str, object]] = []

    for entry in Entry.objects.all().order_by("date"):
        row_k: Dict[str, object] = {"date": entry.date}
        row_n: Dict[str, object] = {"date": entry.date}

        for ev in EntryValue.objects.filter(entry=entry):
            key = id_to_key.get(ev.parameter_id)
            name = id_to_name.get(ev.parameter_id)
            if key:
                row_k[key] = ev.value
            if name:
                row_n[name] = ev.value

        rows_keys.append(row_k)
        rows_names.append(row_n)

    # --- DataFrames ---
    df_keys: pd.DataFrame = pd.DataFrame(rows_keys)
    df_names: pd.DataFrame = pd.DataFrame(rows_names)

    # --- –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã NaN, –∫—Ä–æ–º–µ –¥–∞—Ç—ã) ---
    param_cols = [col for col in df_keys.columns if col != "date"]
    df_keys = df_keys.dropna(how="all", subset=param_cols)

    # --- –≠–∫—Å–ø–æ—Ä—Ç ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ¬ª –≤–∞—Ä–∏–∞–Ω—Ç–∞ ---
    df_names.to_excel("debug_diary_dataframe.xlsx", index=False)

    # --- –õ–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—Ç ¬´machine¬ª‚Äë–≤–∞—Ä–∏–∞–Ω—Ç–∞ ---
    logger.debug("üßû DataFrame head used for training:\n%s", df_keys.head(10).to_string())
    for h in logger.handlers:
        try:
            h.flush()
        except Exception:
            pass

    return df_keys.fillna(0.0)