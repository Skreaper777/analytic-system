# diary/ml_utils/utils.py
import logging
from typing import List, Dict

import pandas as pd

from diary.models import Entry, EntryValue, Parameter

logger = logging.getLogger("diary.ml_utils.utils")


def get_diary_dataframe() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ –≤–∏–¥–µ **pandas DataFrame**.

    *–°—Ç—Ä–æ–∫–∏*¬†‚Äî —ç—Ç–æ –¥–∞—Ç—ã,
    *—Å—Ç–æ–ª–±—Ü—ã*¬†‚Äî **machine‚Äëfriendly** –∫–ª—é—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (``Parameter.key``),
    *–∑–Ω–∞—á–µ–Ω–∏—è*¬†‚Äî —á–∏—Å–ª–æ–≤—ã–µ (``float``).

    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç *–æ—Ç–ª–∞–¥–æ—á–Ω—É—é* –∫–æ–ø–∏—é –≤ ¬´debug_diary_dataframe.xlsx¬ª üìä.
    """

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É id ‚Üí key
    parameters = Parameter.objects.filter(active=True)
    id_to_key: Dict[int, str] = {p.id: p.key for p in parameters}

    # –í—ã–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    entries = Entry.objects.all().order_by("date")

    data: List[Dict[str, float]] = []
    for entry in entries:
        row: Dict[str, float] = {"date": entry.date}

        # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        for ev in EntryValue.objects.filter(entry=entry):
            key = id_to_key.get(ev.parameter_id)
            if key:
                row[key] = ev.value
        data.append(row)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞ 0.0
    df = pd.DataFrame(data).fillna(0.0)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–µ—Å—è—Ç—å —Å—Ç—Ä–æ–∫
    logger.debug("üßû DataFrame head used for training:\n%s", df.head(10).to_string())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    df.to_excel("debug_diary_dataframe.xlsx", index=False)

    return df
