# ---------- diary/ml_utils/utils.py ----------
import logging
from typing import Dict, List

import pandas as pd

from diary.models import Entry, EntryValue, Parameter

logger = logging.getLogger('diary.ml_utils.utils')


def get_diary_dataframe() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ –≤–∏–¥–µ **pandas.DataFrame**.

    * –°—Ç—Ä–æ–∫–∏*¬†‚Äî –¥–∞—Ç—ã (`Entry.date`).
    * –°—Ç–æ–ª–±—Ü—ã*¬†‚Äî machine‚Äëfriendly –∫–ª—é—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (`Parameter.key`).
    * –ó–Ω–∞—á–µ–Ω–∏—è*¬†‚Äî —á–∏—Å–ª–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    üí° **–û—Ç–ª–∞–¥–∫–∞**: –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é DataFrame c *—Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏*
    –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (`Parameter.name_ru`) –≤ `debug_diary_dataframe.xlsx`. –≠—Ç–æ –Ω–µ
    –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É ML‚Äë—á–∞—Å—Ç–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """

    entries = Entry.objects.all().order_by('date')
    parameters = Parameter.objects.filter(active=True)

    id_to_key: Dict[int, str] = {p.id: p.key for p in parameters}

    data: List[dict] = []
    for entry in entries:
        row = {'date': entry.date}
        values = EntryValue.objects.filter(entry=entry)
        for ev in values:
            key = id_to_key.get(ev.parameter_id)
            if key:
                row[key] = ev.value
        data.append(row)

    # DataFrame —Å –∫–ª—é—á–∞–º–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ
    df = pd.DataFrame(data).fillna(0.0)

    logger.debug('üßû DataFrame head (keys):\n%s', df.head(10).to_string())

    # ---- Excel‚Äë–≤–∞—Ä–∏–∞–Ω—Ç ----
    key_to_name = {p.key: p.name_ru for p in parameters}
    df_excel = df.rename(columns=key_to_name)
    try:
        df_excel.to_excel('debug_diary_dataframe.xlsx', index=False)
        logger.debug('üìù debug_diary_dataframe.xlsx –æ–±–Ω–æ–≤–ª—ë–Ω (%d —Å—Ç—Ä–æ–∫)', len(df_excel))
    except Exception as exc:
        logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å debug_diary_dataframe.xlsx: %s', exc)

    return df